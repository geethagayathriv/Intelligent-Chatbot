{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\Projects\\\\Intelligent-Chatbot\\\\src\\\\components\\\\ChatBot\\\\index.js\",\n  _s = $RefreshSig$();\nimport './index.css';\nimport Header from '../Header/Header';\nimport Messages from '../Messages/Messages';\nimport Input from '../Input/Input';\nimport Chatbotbox from '../chatbox/Chatbotbox';\nimport { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [isChatboxOpen, setIsChatboxOpen] = useState(false);\n  const [status, setSatus] = useState('Not Active');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef();\n  const toggleChatbox = () => {\n    setIsChatboxOpen(!isChatboxOpen);\n  };\n  useEffect(() => {\n    if (isChatboxOpen) {\n      setSatus('Active');\n    } else {\n      setSatus('Not Active');\n    }\n  }, [isChatboxOpen]);\n  const handleSend = async () => {\n    const userMessage = inputRef.current.value;\n    if (!userMessage.trim()) return;\n    const newMessage = [...messages, {\n      sender: 'human',\n      text: userMessage,\n      timestamp: new Date().toISOString()\n    }];\n    setMessages(newMessage);\n    inputRef.current.value = \"\";\n    setIsLoading(true);\n    console.log(messages);\n    try {\n      const endPoint = 'http://localhost:8000/chat';\n      const response = await axios.post(endPoint, {\n        question: userMessage\n      });\n      console.log(response);\n      const formattedResponse = formatResponse(response.data.response);\n      const botMessage = {\n        text: formattedResponse,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.log('error sending message: ', error);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  };\n  const formatResponse = response => {\n    const lines = response.split('\\n');\n    return lines.map((line, index) => {\n      if (line.trim().startsWith('*')) {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"key=\", index, line.replace(/^[*]/, '').trim()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 22\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: line.trim()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 22\n        }, this);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `wrapper ${isChatboxOpen ? 'open' : 'closed'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(Header, {\n          name: \"ChatBot\",\n          status: status,\n          closeChat: toggleChatbox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main_content\",\n          children: [/*#__PURE__*/_jsxDEV(Messages, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-dots\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            inputRef: inputRef,\n            handleSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot_icon\",\n      children: /*#__PURE__*/_jsxDEV(Chatbotbox, {\n        isOpen: isChatboxOpen,\n        toggleChatbox: toggleChatbox\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"ZFSHLxjkJ3IxRiI1bek2cJnAvQQ=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["Header","Messages","Input","Chatbotbox","useEffect","useRef","useState","axios","jsxDEV","_jsxDEV","ChatBot","_s","isChatboxOpen","setIsChatboxOpen","status","setSatus","messages","setMessages","isLoading","setIsLoading","inputRef","toggleChatbox","handleSend","userMessage","current","value","trim","newMessage","sender","text","timestamp","Date","toISOString","console","log","endPoint","response","post","question","formattedResponse","formatResponse","data","botMessage","prevMessages","error","lines","split","map","line","index","startsWith","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","className","name","closeChat","isOpen","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/Projects/Intelligent-Chatbot/src/components/ChatBot/index.js"],"sourcesContent":["import './index.css';\r\nimport Header from '../Header/Header';\r\nimport Messages from '../Messages/Messages';\r\nimport Input from '../Input/Input';\r\nimport Chatbotbox from '../chatbox/Chatbotbox'\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ChatBot() {\r\n\r\n    const [isChatboxOpen,setIsChatboxOpen]=useState(false)\r\n    const [status,setSatus]=useState('Not Active')\r\n    const [messages,setMessages]=useState([])\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const inputRef=useRef();  \r\n\r\n    const toggleChatbox=()=>{\r\n      setIsChatboxOpen(!isChatboxOpen)\r\n    }\r\n    useEffect(()=>{\r\n      if(isChatboxOpen){\r\n        setSatus('Active');\r\n      }\r\n      else{\r\n        setSatus('Not Active')\r\n      }\r\n    },[isChatboxOpen]);\r\n\r\n    const handleSend=async()=>{\r\n      const userMessage=inputRef.current.value;\r\n      if(!userMessage.trim()) return;\r\n      const newMessage=[...messages,{sender:'human',text:userMessage,timestamp:new Date().toISOString()}];\r\n      setMessages(newMessage)\r\n      inputRef.current.value=\"\";\r\n      setIsLoading(true);\r\n      console.log(messages)\r\n      try{\r\n        const endPoint='http://localhost:8000/chat'\r\n        const response=await axios.post(endPoint,{\r\n          question: userMessage,\r\n      });\r\n        console.log(response)\r\n        const formattedResponse = formatResponse(response.data.response);\r\n        const botMessage={\r\n          text:formattedResponse,\r\n          sender:'bot',\r\n          timestamp:new Date().toISOString()\r\n        }\r\n        setMessages(prevMessages=>[...prevMessages,botMessage])\r\n      }\r\n      catch(error){\r\n        console.log('error sending message: ',error)\r\n      }\r\n      finally {\r\n        setIsLoading(false); // Set loading state to false\r\n      }\r\n    }\r\n\r\n    const formatResponse = (response) => {\r\n      const lines = response.split('\\n');\r\n      return lines.map((line, index) => {\r\n          if (line.trim().startsWith('*')) {\r\n              return <ul><li>key={index}{line.replace(/^[*]/, '').trim()}</li></ul>;\r\n          } else {\r\n              return <p key={index}>{line.trim()}</p>;\r\n          }\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={`wrapper ${isChatboxOpen?'open':'closed'}`}>\r\n          <div className=\"content\">\r\n            <Header name=\"ChatBot\" status={status} closeChat={toggleChatbox}/>\r\n          </div>\r\n          <div className=\"main\">\r\n            <div className=\"main_content\">\r\n              <Messages messages={messages}/>\r\n              {/* <div ref={messagesEndRef} /> */}\r\n              {isLoading && <div className=\"loading-dots\">...</div>}\r\n            </div>\r\n            <div className=\"bottom\"> \r\n              <Input inputRef={inputRef} handleSend={handleSend}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"chatbot_icon\">\r\n        <Chatbotbox isOpen={isChatboxOpen} toggleChatbox={toggleChatbox}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}