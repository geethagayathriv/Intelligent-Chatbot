{"ast":null,"code":"import React from\"react\";import'./Messages.css';import bot_icon from'../../image/bot_icon.jpg';import Botmessage from\"../Bot/Botmessage\";import HumanMessage from\"../Human/HumanMessage\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Messages=_ref=>{let{messages}=_ref;const formatTime=timestamp=>{const date=new Date(timestamp);const hours=date.getHours();const minutes=date.getMinutes();return\"\".concat(hours,\":\").concat(minutes<10?'0':'').concat(minutes);};return/*#__PURE__*/_jsxs(\"div\",{className:\"messages\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"initial-message\",children:[/*#__PURE__*/_jsx(\"img\",{src:bot_icon,className:\"message-avatar\"}),/*#__PURE__*/_jsx(\"div\",{className:\"start-message\",children:\"Hi I am chitti. How can I help you?\"})]}),messages.map((message,index)=>message.sender==='bot'?/*#__PURE__*/_jsx(Botmessage,{message:message.text,timestamp:formatTime(message.timestamp)}):/*#__PURE__*/_jsx(HumanMessage,{message:message.text,timestamp:formatTime(message.timestamp)}))]});};export default Messages;{/* <div \r\n                    key={index} \r\n                    className={`message-container ${message.sender===\"bot\"?\"bot\":\"human\"}`}\r\n                >\r\n                    <img \r\n                        src={message.sender==='bot'?bot_icon:user}\r\n                        alt={message.sender} \r\n                        className=\"message-avatar\"\r\n                    />\r\n                    <div className={`message ${message.sender==='bot'?'bot-message':'human-message'}`}>\r\n                        <div className=\"message-text\">{message.text}</div>\r\n                        <div className=\"message-time\">  {formatTime(message.timestamp)}</div>\r\n                    </div>\r\n                </div> */}","map":{"version":3,"names":["React","bot_icon","Botmessage","HumanMessage","jsx","_jsx","jsxs","_jsxs","Messages","_ref","messages","formatTime","timestamp","date","Date","hours","getHours","minutes","getMinutes","concat","className","children","src","map","message","index","sender","text"],"sources":["C:/Users/HP/OneDrive/Desktop/myreactnotes/chatbot/src/components/Messages/Messages.js"],"sourcesContent":["import React from \"react\";\r\nimport './Messages.css'\r\nimport bot_icon from '../../image/bot_icon.jpg'\r\nimport Botmessage from \"../Bot/Botmessage\";\r\nimport HumanMessage from \"../Human/HumanMessage\";\r\n\r\nconst Messages=({messages})=>{\r\n    const formatTime=(timestamp)=>{\r\n        const date=new Date(timestamp);\r\n        const hours=date.getHours();\r\n        const minutes=date.getMinutes();\r\n        return `${hours}:${minutes<10?'0':''}${minutes}`\r\n    }\r\n\r\n    return(\r\n        <div className=\"messages\">\r\n            <div className=\"initial-message\">\r\n                <img src={bot_icon} className=\"message-avatar\"/>\r\n                <div className=\"start-message\">Hi I am chitti. How can I help you?</div>\r\n            </div>\r\n                {messages.map((message,index)=>(\r\n                    message.sender==='bot'?\r\n                    <Botmessage message={message.text} timestamp={formatTime(message.timestamp)}/>:\r\n                    <HumanMessage message={message.text} timestamp={formatTime(message.timestamp)}/>))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Messages\r\n\r\n\r\n\r\n{/* <div \r\n                    key={index} \r\n                    className={`message-container ${message.sender===\"bot\"?\"bot\":\"human\"}`}\r\n                >\r\n                    <img \r\n                        src={message.sender==='bot'?bot_icon:user}\r\n                        alt={message.sender} \r\n                        className=\"message-avatar\"\r\n                    />\r\n                    <div className={`message ${message.sender==='bot'?'bot-message':'human-message'}`}>\r\n                        <div className=\"message-text\">{message.text}</div>\r\n                        <div className=\"message-time\">  {formatTime(message.timestamp)}</div>\r\n                    </div>\r\n                </div> */}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,gBAAgB,CACvB,MAAO,CAAAC,QAAQ,KAAM,0BAA0B,CAC/C,MAAO,CAAAC,UAAU,KAAM,mBAAmB,CAC1C,MAAO,CAAAC,YAAY,KAAM,uBAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjD,KAAM,CAAAC,QAAQ,CAACC,IAAA,EAAc,IAAb,CAACC,QAAQ,CAAC,CAAAD,IAAA,CACtB,KAAM,CAAAE,UAAU,CAAEC,SAAS,EAAG,CAC1B,KAAM,CAAAC,IAAI,CAAC,GAAI,CAAAC,IAAI,CAACF,SAAS,CAAC,CAC9B,KAAM,CAAAG,KAAK,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,CAC3B,KAAM,CAAAC,OAAO,CAACJ,IAAI,CAACK,UAAU,CAAC,CAAC,CAC/B,SAAAC,MAAA,CAAUJ,KAAK,MAAAI,MAAA,CAAIF,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAAE,MAAA,CAAGF,OAAO,EAClD,CAAC,CAED,mBACIV,KAAA,QAAKa,SAAS,CAAC,UAAU,CAAAC,QAAA,eACrBd,KAAA,QAAKa,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC5BhB,IAAA,QAAKiB,GAAG,CAAErB,QAAS,CAACmB,SAAS,CAAC,gBAAgB,CAAC,CAAC,cAChDf,IAAA,QAAKe,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,qCAAmC,CAAK,CAAC,EACvE,CAAC,CACDX,QAAQ,CAACa,GAAG,CAAC,CAACC,OAAO,CAACC,KAAK,GACxBD,OAAO,CAACE,MAAM,GAAG,KAAK,cACtBrB,IAAA,CAACH,UAAU,EAACsB,OAAO,CAAEA,OAAO,CAACG,IAAK,CAACf,SAAS,CAAED,UAAU,CAACa,OAAO,CAACZ,SAAS,CAAE,CAAC,CAAC,cAC9EP,IAAA,CAACF,YAAY,EAACqB,OAAO,CAAEA,OAAO,CAACG,IAAK,CAACf,SAAS,CAAED,UAAU,CAACa,OAAO,CAACZ,SAAS,CAAE,CAAC,CAAE,CAAC,EACzF,CAAC,CAGd,CAAC,CAED,cAAe,CAAAJ,QAAQ,CAIvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAbC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}